From 2f6a06ccb0ef78e6122bb9e67f9b8b1ad07776e1 Mon Sep 17 00:00:00 2001
From: Benjamin Eberlei <kontakt@beberlei.de>
Date: Wed, 5 Jan 2022 11:09:25 +0100
Subject: [PATCH] Fix #81430: Attribute instantiation leaves dangling pointer

By switching attribute constructor stackframe to be called via
trampoline the stack allocation is not causing dangling pointers
in the zend_observer API anymore.

Co-Authored-By: Florian Sowade <f.sowade@suora.com>
Co-Authored-By: Christopher Becker <cmbecker69@gmx.de>
Co-Authored-By: Dmitry Stogov <dmitry@zend.com>

Closes GH-7885.

Bug: https://github.com/php/php-src/pull/7885
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/php8.1/+bug/2054621
Origin: backport, https://github.com/php/php-src/commit/2f6a06ccb0ef78e6122bb9e67f9b8b1ad07776e1
Last-Update: 2022-02-23
---
 ext/reflection/php_reflection.c              |  1 +
 ext/zend_test/tests/observer_bug81430_1.phpt | 31 ++++++++++++++++++
 ext/zend_test/tests/observer_bug81430_2.phpt | 33 ++++++++++++++++++++
 4 files changed, 69 insertions(+)
 create mode 100644 ext/zend_test/tests/observer_bug81430_1.phpt
 create mode 100644 ext/zend_test/tests/observer_bug81430_2.phpt

diff --git a/ext/reflection/php_reflection.c b/ext/reflection/php_reflection.c
index f9b888f1c166b..61df70c4ec8a4 100644
--- a/ext/reflection/php_reflection.c
+++ b/ext/reflection/php_reflection.c
@@ -6315,6 +6315,7 @@ static int call_attribute_constructor(
 		dummy_func.type = ZEND_USER_FUNCTION;
 		dummy_func.common.fn_flags =
 			attr->flags & ZEND_ATTRIBUTE_STRICT_TYPES ? ZEND_ACC_STRICT_TYPES : 0;
+		dummy_func.common.fn_flags |= ZEND_ACC_CALL_VIA_TRAMPOLINE;
 		dummy_func.op_array.filename = filename;
 
 		dummy_opline.opcode = ZEND_DO_FCALL;
diff --git a/ext/zend_test/tests/observer_bug81430_1.phpt b/ext/zend_test/tests/observer_bug81430_1.phpt
new file mode 100644
index 0000000000000..cac53ef70cbbb
--- /dev/null
+++ b/ext/zend_test/tests/observer_bug81430_1.phpt
@@ -0,0 +1,31 @@
+--TEST--
+Bug #81430 (Attribute instantiation frame accessing invalid frame pointer)
+--EXTENSIONS--
+zend_test
+--INI--
+memory_limit=20M
+zend_test.observer.enabled=1
+zend_test.observer.observe_all=1
+--FILE--
+<?php
+
+#[\Attribute]
+class A {
+    private $a;
+    public function __construct() {
+    }
+}
+
+#[A]
+function B() {}
+
+$r = new \ReflectionFunction("B");
+call_user_func([$r->getAttributes(A::class)[0], 'newInstance']);
+?>
+--EXPECTF--
+<!-- init '%s' -->
+<file '%s'>
+  <!-- init A::__construct() -->
+  <A::__construct>
+  </A::__construct>
+</file '%s'>
diff --git a/ext/zend_test/tests/observer_bug81430_2.phpt b/ext/zend_test/tests/observer_bug81430_2.phpt
new file mode 100644
index 0000000000000..4d56248a80f34
--- /dev/null
+++ b/ext/zend_test/tests/observer_bug81430_2.phpt
@@ -0,0 +1,33 @@
+--TEST--
+Bug #81430 (Attribute instantiation leaves dangling execute_data pointer)
+--EXTENSIONS--
+zend_test
+--INI--
+memory_limit=20M
+zend_test.observer.enabled=1
+zend_test.observer.observe_all=1
+--FILE--
+<?php
+
+#[\Attribute]
+class A {
+    public function __construct() {
+        array_map("str_repeat", ["\xFF"], [100000000]); // cause a bailout
+    }
+}
+
+#[A]
+function B() {}
+
+$r = new \ReflectionFunction("B");
+call_user_func([$r->getAttributes(A::class)[0], 'newInstance']);
+?>
+--EXPECTF--
+<!-- init '%s' -->
+<file '%s'>
+  <!-- init A::__construct() -->
+  <A::__construct>
+
+Fatal error: Allowed memory size of %d bytes exhausted %s in %s on line %d
+  </A::__construct>
+</file '%s'>
